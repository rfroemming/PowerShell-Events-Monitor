<#
Author: Régis Froemming
Date: February 13, 2022
Description: Detect RDP conection, send email alert  
#>
$header = @"
<style>
    h1 {
        font-family: Arial, Helvetica, sans-serif;
        color: #e68a00;
        font-size: 28px;
    }
    h2 {
        font-family: Arial, Helvetica, sans-serif;
        color: #000099;
        font-size: 16px;
    }
    body {
        font-size: 12px;
		border: 0px; 
		font-family: Arial, Helvetica, sans-serif;
    }
    table {
		font-size: 12px;
		border: 0px; 
		font-family: Arial, Helvetica, sans-serif;
	} 
    td {
		padding: 4px;
		margin: 0px;
		border: 0;
	}
    th {
        background: #395870;
        background: linear-gradient(#49708f, #293f50);
        color: #fff;
        font-size: 11px;
        padding: 10px 15px;
        vertical-align: middle;
	}
    tbody tr:nth-child(even) {
        background: #f0f0f2;
    }
    #CreationDate {
        font-family: Arial, Helvetica, sans-serif;
        color: #ff3300;
        font-size: 12px;
    }
    .StopStatus {
        color: #ff0000;
    }
    .RunningStatus {
        color: #008000;
    }
</style>
"@


$path_transcript = "C:\Users\Administrator\AppData\LocalLow\Microsoft\Windows\System32\Transcripts\$(Get-Date -Format "yyyyMMdd")\"
#Start-Transcript -Path $path_transcript

$path = "C:\Users\Administrator\AppData\LocalLow\Microsoft\Windows\System32"
####################################################################
## Clean Transcripts generated by the self executation of the script
####################################################################

$allfiles = Get-ChildItem "$path_transcript" -Filter *.TXT  
Foreach ($file in $allfiles)
{
    $search = (Get-Content "$path_transcript\$file"  | Select-String -Pattern 'detect.exe').Matches.Success
     if ($search)
        { 
            Remove-Item "$path_transcript\$file" -Recurse -Force
        }
        
        else
        {
             $search = (Get-Content "$path_transcript\$file"  | Select-String -Pattern 'rep.exe').Matches.Success
             if ($search)
                { 
                    Remove-Item "$path_transcript\$file" -Recurse -Force 
                }
                else
                {
                    $search = (Get-Content "$path_transcript\$file"  | Select-String -Pattern 'kill.exe').Matches.Success
                    if ($search)
                    { 
                        Remove-Item "$path_transcript\$file" -Recurse -Force  
                    }
                    else
                    {
                        $search = (Get-Content "$path_transcript\$file"  | Select-String -Pattern 'scr.exe').Matches.Success
                        if ($search)
                        { 
                            Remove-Item "$path_transcript\$file" -Recurse -Force  
                        }
                    }
                    
                }
        }
}


function Send-Email($content)
{
################
## Send Email ##
################

    $userName = "honey.audit.project@gmail.com"
    $password = 'nscc@2022'
    $pwdSecureString = ConvertTo-SecureString -Force -AsPlainText $password

    $Param = @{
        From = "honey.audit.project@gmail.com"
        To = "honey.audit.project@gmail.com"
        Cc = "w0432947@nscc.ca"
        #Cc = "w0432947@nscc.ca" , "w0451908@nscc.ca" , "W0433890@nscc.ca"
        Subject = "RDP Connection on Honey Server"
        SMTPServer = "smtp.gmail.com"
        UseSsl = $true
        Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $userName, $pwdSecureString
    }
    $Body = "<h2>Detected RDP connection</h2></br>"
    $Body = $Body + "<a>$(Get-Date)</a></br>"
    $Body = $Body + ($a | ConvertTo-Html -Fragment -As Table)
    $Body = $Body + "</br><a>A report will be generated when the session ends</a>"
    Send-MailMessage  @Param -Body "$Body" -BodyAsHtml 
}
#########################
## Call report generator
#########################
function Gen-Report ($user)
{
    # generate report and delete file
    # get creation date and time from the file
    $starttime = Get-ChildItem -Path "$path\$($user).txt" | select CreationTime
    $now = Get-Date
    $starttime2 = ($starttime.CreationTime).AddMinutes(-2)
    $duration=$now - $starttime2
    #powershell "$path\Report.ps1" -Min $duration.Minutes -Sub $user
    & "$path\rep.exe" -Min $duration.Minutes -Sub $user
    Remove-Item "$path\$($session.Username).txt" -Recurse -Force
}
############################
# Check active RDP sessions
############################

$Computer = $env:COMPUTERNAME
$Users = query user /server:$Computer 2>&1

$Users = $Users | ForEach-Object {
    (($_.trim() -replace ">" -replace "(?m)^([A-Za-z0-9]{3,})\s+(\d{1,2}\s+\w+)", '$1  none  $2' -replace "\s{2,}", "," -replace "none", $null))
} | ConvertFrom-Csv

$a = foreach ($User in $Users)
{
    [PSCustomObject]@{
        ComputerName = $Computer
        Username = $User.USERNAME
        SessionState = $User.STATE.Replace("Disc", "Disconnected")
        SessionType = $($User.SESSIONNAME -Replace '#', '' -Replace "[0-9]+", "")
    } 
}

############################
## Monitor RDP Connection ##
############################

$filenames = Get-ChildItem $path\*.txt | select -expand fullname

foreach ($file in $filenames)
{
   if ($a.Username.Contains((Get-Item $file).BaseName)) 
   {
      # True
      # File is in the active list conection, no action needed
   }
   else
   {
        $n = (Get-Item $file).BaseName
        Gen-Report($n) 
        Remove-Item "$path\$($n).txt" -Recurse -Force
   }
    
}

foreach ($session in $a) 
{
    if ($session.SessionState -eq 'Active')
    {
        #check if file exist
        #Write-Output "$($session.Username) active"
        if (Test-Path -Path "$path\$($session.Username).txt")
        {
           if (Test-Path -Path "$path\rekith22.txt")
           {
             #  & "$PSScriptRoot\scr.ps1"
           }

        }
        else
        {
            # File does not exist Create one
            # Send a email
            Send-Email($a)
            # Create a file to use as timestamp when user loged on
            New-Item -Path "$path\$($session.Username).txt"
            #Start-Transcript -Path "$Path\TempReport\$(Get-Date -Format "yyyyMMdd")\PowerShel_$(Get-Date -Format "yyyyMMdd").txt"
        }
    }
    if ($session.SessionState -ne 'Active')
    {
        #check if file exist
        #Write-Output "$($session.Username) not active"
        if (Test-Path -Path "$path\$($session.Username).txt")
        {
            Gen-Report($session.Username)  
        }
    }
}

